
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sai kirana General Store - Login</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap');
        
        body {
            font-family: 'Poppins', sans-serif;
            background-color: #f8f5f2;
        }
        
        .login-container {
            background-image: linear-gradient(135deg, rgba(42, 157, 143, 0.8), rgba(38, 70, 83, 0.9)), 
                              url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='100' height='100' viewBox='0 0 100 100'%3E%3Cg fill-rule='evenodd'%3E%3Cg fill='%23ffffff' fill-opacity='0.12'%3E%3Cpath opacity='.5' d='M96 95h4v1h-4v4h-1v-4h-9v4h-1v-4h-9v4h-1v-4h-9v4h-1v-4h-9v4h-1v-4h-9v4h-1v-4h-9v4h-1v-4h-9v4h-1v-4h-9v4h-1v-4H0v-1h15v-9H0v-1h15v-9H0v-1h15v-9H0v-1h15v-9H0v-1h15v-9H0v-1h15v-9H0v-1h15v-9H0v-1h15v-9H0v-1h15V0h1v15h9V0h1v15h9V0h1v15h9V0h1v15h9V0h1v15h9V0h1v15h9V0h1v15h9V0h1v15h9V0h1v15h4v1h-4v9h4v1h-4v9h4v1h-4v9h4v1h-4v9h4v1h-4v9h4v1h-4v9h4v1h-4v9h4v1h-4v9zm-1 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-9-10h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm9-10v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-9-10h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm9-10v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-9-10h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm9-10v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-10 0v-9h-9v9h9zm-9-10h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9zm10 0h9v-9h-9v9z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E");
        }
        
        .transaction-card {
            transition: all 0.3s ease;
        }
        
        .transaction-card:hover {
            transform: translateY(-3px);
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
        }
        
        .income {
            border-left: 4px solid #10b981;
        }
        
        .expense {
            border-left: 4px solid #ef4444;
        }
    </style>
</head>
<body>
    <div id="login-page" class="min-h-screen flex items-center justify-center login-container">
        <div class="bg-white rounded-lg shadow-xl p-8 w-full max-w-md">
            <div class="text-center mb-8">
                <div class="flex justify-center mb-4">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 text-[#2a9d8f]" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4L5 9z" />
                    </svg>
                </div>
                <h1 class="text-3xl font-bold text-gray-800">Sai kirana General Store</h1>
                <p class="text-gray-600 mt-2">Login to access your store management system</p>
            </div>
            
            <div id="login-error" class="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-6 hidden">
                <div class="flex items-center">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
                    </svg>
                    <p>Invalid username or password. Please try again.</p>
                </div>
            </div>
            
            <form id="login-form" class="space-y-6">
                <div>
                    <label for="username" class="block text-sm font-medium text-gray-700 mb-1">Username</label>
                    <div class="relative">
                        <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                            </svg>
                        </div>
                        <input 
                            type="text" 
                            id="username" 
                            class="w-full pl-10 pr-4 py-2 border rounded-md focus:ring-2 focus:ring-[#2a9d8f] focus:outline-none" 
                            placeholder="Enter your username"
                            required
                        >
                    </div>
                </div>
                
                <div>
                    <label for="password" class="block text-sm font-medium text-gray-700 mb-1">Password</label>
                    <div class="relative">
                        <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z" />
                            </svg>
                        </div>
                        <input 
                            type="password" 
                            id="password" 
                            class="w-full pl-10 pr-4 py-2 border rounded-md focus:ring-2 focus:ring-[#2a9d8f] focus:outline-none" 
                            placeholder="Enter your password"
                            required
                        >
                    </div>
                </div>
                
                <div class="flex items-center justify-between">
                    <div class="flex items-center">
                        <input id="remember-me" type="checkbox" class="h-4 w-4 text-[#2a9d8f] focus:ring-[#2a9d8f] border-gray-300 rounded">
                        <label for="remember-me" class="ml-2 block text-sm text-gray-700">Remember me</label>
                    </div>
                    
                    <div class="text-sm">
                        <a href="#" class="font-medium text-[#2a9d8f] hover:text-[#238b7e]">Forgot password?</a>
                    </div>
                </div>
                
                <div>
                    <button 
                        type="submit" 
                        class="w-full bg-[#2a9d8f] text-white py-2 px-4 rounded-md hover:bg-[#238b7e] transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-[#2a9d8f]"
                    >
                        Sign in
                    </button>
                </div>
            </form>
            
            <div class="mt-6 text-center text-sm">
                <p class="text-gray-600">
                    Need help? <a href="#" class="font-medium text-[#2a9d8f] hover:text-[#238b7e]">Contact support</a>
                </p>
            </div>
        </div>
    </div>

    <div id="main-app" class="hidden min-h-screen flex flex-col">
        <!-- Header -->
        <header class="bg-[#2a9d8f] text-white shadow-lg">
            <div class="container mx-auto px-4 py-6 flex justify-between items-center">
                <div class="flex items-center space-x-2">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4L5 9z" />
                    </svg>
                    <h1 class="text-2xl font-bold">Sai kirana General Store</h1>
                </div>
                <nav class="flex items-center">
                    <ul class="flex space-x-6 mr-6">
                        <li><a href="#" class="hover:underline font-medium">Home</a></li>
                        <li><a href="#" class="hover:underline font-medium">Products</a></li>
                        <li><a href="#" class="hover:underline font-medium">Transactions</a></li>
                        <li><a href="#" class="hover:underline font-medium">Contact</a></li>
                    </ul>
                    <button id="logout-btn" class="bg-white text-[#2a9d8f] px-4 py-1 rounded-md hover:bg-gray-100 transition-colors flex items-center">
                        <span>Logout</span>
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 ml-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1" />
                        </svg>
                    </button>
                </nav>
            </div>
        </header>

        <!-- Main Content -->
        <main class="flex-grow container mx-auto px-4 py-8">
            <!-- Dashboard Section -->
            <section class="mb-12">
                <div class="bg-white rounded-lg shadow-md p-6">
                    <h2 class="text-2xl font-semibold mb-6 text-gray-800">Financial Dashboard</h2>
                    
                    <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
                        <!-- Total Income Card -->
                        <div class="bg-gradient-to-r from-green-50 to-green-100 p-6 rounded-lg shadow">
                            <div class="flex items-center justify-between">
                                <div>
                                    <p class="text-green-800 text-sm font-medium">Total Income</p>
                                    <p class="text-3xl font-bold text-green-700" id="total-income">₹0.00</p>
                                </div>
                                <div class="bg-green-200 p-3 rounded-full">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-green-700" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
                                    </svg>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Total Expenses Card -->
                        <div class="bg-gradient-to-r from-red-50 to-red-100 p-6 rounded-lg shadow">
                            <div class="flex items-center justify-between">
                                <div>
                                    <p class="text-red-800 text-sm font-medium">Total Expenses</p>
                                    <p class="text-3xl font-bold text-red-700" id="total-expenses">₹0.00</p>
                                </div>
                                <div class="bg-red-200 p-3 rounded-full">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-red-700" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 12H4" />
                                    </svg>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Balance Card -->
                        <div class="bg-gradient-to-r from-blue-50 to-blue-100 p-6 rounded-lg shadow">
                            <div class="flex items-center justify-between">
                                <div>
                                    <p class="text-blue-800 text-sm font-medium">Current Balance</p>
                                    <p class="text-3xl font-bold text-blue-700" id="balance">₹0.00</p>
                                </div>
                                <div class="bg-blue-200 p-3 rounded-full">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-blue-700" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                                    </svg>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Add Transaction Form -->
                    <div class="bg-gray-50 p-6 rounded-lg shadow mb-8">
                        <h3 class="text-xl font-semibold mb-4 text-gray-800">Add New Transaction</h3>
                        <form id="transaction-form" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                            <div>
                                <label for="customer" class="block text-sm font-medium text-gray-700 mb-1">Customer Name</label>
                                <input type="text" id="customer" class="w-full px-4 py-2 border rounded-md focus:ring-2 focus:ring-[#2a9d8f] focus:outline-none" required>
                            </div>
                            <div>
                                <label for="amount" class="block text-sm font-medium text-gray-700 mb-1">Amount (₹)</label>
                                <input type="number" id="amount" step="0.01" min="0.01" class="w-full px-4 py-2 border rounded-md focus:ring-2 focus:ring-[#2a9d8f] focus:outline-none" required>
                            </div>
                            <div>
                                <label for="type" class="block text-sm font-medium text-gray-700 mb-1">Transaction Type</label>
                                <select id="type" class="w-full px-4 py-2 border rounded-md focus:ring-2 focus:ring-[#2a9d8f] focus:outline-none" required>
                                    <option value="income">Income (Customer Purchase)</option>
                                    <option value="expense">Expense (Store Purchase)</option>
                                </select>
                            </div>
                            <div>
                                <label for="description" class="block text-sm font-medium text-gray-700 mb-1">Description</label>
                                <input type="text" id="description" class="w-full px-4 py-2 border rounded-md focus:ring-2 focus:ring-[#2a9d8f] focus:outline-none" required>
                            </div>
                            <div class="md:col-span-2 lg:col-span-4">
                                <button type="submit" class="bg-[#2a9d8f] text-white px-6 py-2 rounded-md hover:bg-[#238b7e] transition-colors w-full md:w-auto">
                                    Add Transaction
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
            </section>
            
            <!-- Recent Transactions -->
            <section>
                <div class="bg-white rounded-lg shadow-md p-6">
                    <div class="flex flex-col md:flex-row md:items-center md:justify-between mb-6">
                        <h2 class="text-2xl font-semibold text-gray-800 mb-4 md:mb-0">Recent Transactions</h2>
                        
                        <div class="flex flex-col md:flex-row space-y-4 md:space-y-0 md:space-x-4">
                            <!-- Customer Search -->
                            <div class="flex items-center">
                                <div class="relative">
                                    <input 
                                        type="text" 
                                        id="customer-search" 
                                        placeholder="Search customer..." 
                                        class="w-full pl-10 pr-4 py-2 border rounded-md focus:ring-2 focus:ring-[#2a9d8f] focus:outline-none"
                                    >
                                    <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                                        </svg>
                                    </div>
                                    <button 
                                        id="clear-search" 
                                        class="absolute inset-y-0 right-0 pr-3 flex items-center text-gray-400 hover:text-gray-600 hidden"
                                    >
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                                        </svg>
                                    </button>
                                </div>
                            </div>
                            
                            <!-- Filter Buttons -->
                            <div class="flex space-x-2">
                                <button id="all-btn" class="px-4 py-2 bg-gray-200 rounded-md hover:bg-gray-300 transition-colors text-sm font-medium">All</button>
                                <button id="income-btn" class="px-4 py-2 bg-gray-200 rounded-md hover:bg-gray-300 transition-colors text-sm font-medium">Income</button>
                                <button id="expense-btn" class="px-4 py-2 bg-gray-200 rounded-md hover:bg-gray-300 transition-colors text-sm font-medium">Expenses</button>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Search Results Info -->
                    <div id="search-results" class="mb-4 text-sm text-gray-600 hidden">
                        Showing results for: <span id="search-term" class="font-medium"></span>
                        <button id="reset-search" class="ml-2 text-[#2a9d8f] hover:underline">Show all</button>
                    </div>
                    
                    <div class="overflow-x-auto">
                        <table class="min-w-full bg-white">
                            <thead class="bg-gray-100">
                                <tr>
                                    <th class="py-3 px-4 text-left text-sm font-medium text-gray-600 uppercase tracking-wider">Date</th>
                                    <th class="py-3 px-4 text-left text-sm font-medium text-gray-600 uppercase tracking-wider">Customer</th>
                                    <th class="py-3 px-4 text-left text-sm font-medium text-gray-600 uppercase tracking-wider">Description</th>
                                    <th class="py-3 px-4 text-left text-sm font-medium text-gray-600 uppercase tracking-wider">Amount</th>
                                    <th class="py-3 px-4 text-left text-sm font-medium text-gray-600 uppercase tracking-wider">Type</th>
                                    <th class="py-3 px-4 text-left text-sm font-medium text-gray-600 uppercase tracking-wider">Actions</th>
                                </tr>
                            </thead>
                            <tbody id="transactions-table-body">
                                <!-- Transactions will be added here dynamically -->
                                <tr>
                                    <td colspan="6" class="py-4 px-4 text-center text-gray-500">No transactions yet. Add one above!</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </section>
        </main>

        <!-- Footer -->
        <footer class="bg-gray-800 text-white py-8">
            <div class="container mx-auto px-4">
                <div class="grid grid-cols-1 md:grid-cols-3 gap-8">
                    <div>
                        <h3 class="text-lg font-semibold mb-4">ge Sai kirana General Store</h3>
                        <p class="text-gray-300">Your one-stop shop for all your daily needs. Serving the community since 1985.</p>
                    </div>
                    <div>
                        <h3 class="text-lg font-semibold mb-4">Opening Hours</h3>
                        <p class="text-gray-300">Monday - Friday: 8am - 8pm</p>
                        <p class="text-gray-300">Saturday: 9am - 7pm</p>
                        <p class="text-gray-300">Sunday: 10am - 6pm</p>
                    </div>
                    <div>
                        <h3 class="text-lg font-semibold mb-4">Contact Us</h3>
                        <p class="text-gray-300">123 Main Street, Village Town</p>
                        <p class="text-gray-300">Phone: (555) 123-4567</p>
                        <p class="text-gray-300">Email: info@villagegeneralstore.com</p>
                    </div>
                </div>
                <div class="border-t border-gray-700 mt-8 pt-6 text-center text-gray-400">
                    <p>&copy; 2023 Sai kirana General Store. All rights reserved.</p>
                </div>
            </div>
        </footer>
    </div>

    <!-- Delete Confirmation Modal -->
    <div id="delete-modal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden">
        <div class="bg-white rounded-lg p-6 max-w-md w-full">
            <h3 class="text-xl font-semibold mb-4">Confirm Deletion</h3>
            <p class="mb-6">Are you sure you want to delete this transaction? This action cannot be undone.</p>
            <div class="flex justify-end space-x-4">
                <button id="cancel-delete" class="px-4 py-2 bg-gray-200 rounded-md hover:bg-gray-300 transition-colors">Cancel</button>
                <button id="confirm-delete" class="px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 transition-colors">Delete</button>
            </div>
        </div>
    </div>

    <!-- Edit Transaction Modal -->
    <div id="edit-modal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden">
        <div class="bg-white rounded-lg p-6 max-w-lg w-full">
            <h3 class="text-xl font-semibold mb-4">Edit Transaction</h3>
            <form id="edit-form" class="space-y-4">
                <div>
                    <label for="edit-customer" class="block text-sm font-medium text-gray-700 mb-1">Customer Name</label>
                    <input type="text" id="edit-customer" class="w-full px-4 py-2 border rounded-md focus:ring-2 focus:ring-[#2a9d8f] focus:outline-none" required>
                </div>
                <div>
                    <label for="edit-amount" class="block text-sm font-medium text-gray-700 mb-1">Amount (₹)</label>
                    <input type="number" id="edit-amount" step="0.01" min="0.01" class="w-full px-4 py-2 border rounded-md focus:ring-2 focus:ring-[#2a9d8f] focus:outline-none" required>
                </div>
                <div>
                    <label for="edit-type" class="block text-sm font-medium text-gray-700 mb-1">Transaction Type</label>
                    <select id="edit-type" class="w-full px-4 py-2 border rounded-md focus:ring-2 focus:ring-[#2a9d8f] focus:outline-none" required>
                        <option value="income">Income (Customer Purchase)</option>
                        <option value="expense">Expense (Store Purchase)</option>
                    </select>
                </div>
                <div>
                    <label for="edit-description" class="block text-sm font-medium text-gray-700 mb-1">Description</label>
                    <input type="text" id="edit-description" class="w-full px-4 py-2 border rounded-md focus:ring-2 focus:ring-[#2a9d8f] focus:outline-none" required>
                </div>
                <div class="flex justify-end space-x-4 pt-2">
                    <button type="button" id="cancel-edit" class="px-4 py-2 bg-gray-200 rounded-md hover:bg-gray-300 transition-colors">Cancel</button>
                    <button type="submit" class="px-4 py-2 bg-[#2a9d8f] text-white rounded-md hover:bg-[#238b7e] transition-colors">Save Changes</button>
                </div>
            </form>
        </div>
    </div>

    <!-- View Transaction Modal -->
    <div id="view-modal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden">
        <div class="bg-white rounded-lg p-6 max-w-lg w-full">
            <div class="flex justify-between items-center mb-6">
                <h3 class="text-xl font-semibold">Transaction Details</h3>
                <button id="close-view" class="text-gray-400 hover:text-gray-600">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                    </svg>
                </button>
            </div>
            <div class="space-y-4">
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                        <p class="text-sm text-gray-500">Transaction ID</p>
                        <p id="view-id" class="font-medium"></p>
                    </div>
                    <div>
                        <p class="text-sm text-gray-500">Date & Time</p>
                        <p id="view-date" class="font-medium"></p>
                    </div>
                </div>
                <div>
                    <p class="text-sm text-gray-500">Customer</p>
                    <p id="view-customer" class="font-medium"></p>
                </div>
                <div>
                    <p class="text-sm text-gray-500">Description</p>
                    <p id="view-description" class="font-medium"></p>
                </div>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                        <p class="text-sm text-gray-500">Amount</p>
                        <p id="view-amount" class="font-medium text-xl"></p>
                    </div>
                    <div>
                        <p class="text-sm text-gray-500">Transaction Type</p>
                        <p id="view-type" class="font-medium"></p>
                    </div>
                </div>
            </div>
            <div class="mt-8 flex justify-end space-x-4">
                <button id="view-edit-btn" class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors">Edit</button>
                <button id="view-close-btn" class="px-4 py-2 bg-gray-200 rounded-md hover:bg-gray-300 transition-colors">Close</button>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Login credentials
            const validUsername = "Sai99126";
            const validPassword = "Sai6926";
            
            // DOM elements for login
            const loginPage = document.getElementById('login-page');
            const mainApp = document.getElementById('main-app');
            const loginForm = document.getElementById('login-form');
            const loginError = document.getElementById('login-error');
            const logoutBtn = document.getElementById('logout-btn');
            
            // Check if user is already logged in
            if (sessionStorage.getItem('isLoggedIn') === 'true') {
                showMainApp();
            }
            
            // Login form submission
            loginForm.addEventListener('submit', function(e) {
                e.preventDefault();
                
                const username = document.getElementById('username').value;
                const password = document.getElementById('password').value;
                const rememberMe = document.getElementById('remember-me').checked;
                
                if (username === validUsername && password === validPassword) {
                    // Store login state
                    sessionStorage.setItem('isLoggedIn', 'true');
                    
                    if (rememberMe) {
                        localStorage.setItem('rememberedUser', username);
                    } else {
                        localStorage.removeItem('rememberedUser');
                    }
                    
                    showMainApp();
                } else {
                    loginError.classList.remove('hidden');
                    setTimeout(() => {
                        loginError.classList.add('hidden');
                    }, 3000);
                }
            });
            
            // Logout button
            logoutBtn.addEventListener('click', function() {
                sessionStorage.removeItem('isLoggedIn');
                showLoginPage();
            });
            
            // Check for remembered user
            if (localStorage.getItem('rememberedUser')) {
                document.getElementById('username').value = localStorage.getItem('rememberedUser');
                document.getElementById('remember-me').checked = true;
            }
            
            function showMainApp() {
                loginPage.classList.add('hidden');
                mainApp.classList.remove('hidden');
                initializeApp();
            }
            
            function showLoginPage() {
                mainApp.classList.add('hidden');
                loginPage.classList.remove('hidden');
            }
            
            // Initialize variables for main app
            let transactions = [];
            let currentFilter = 'all';
            let currentSearch = '';
            let transactionToDelete = null;
            let transactionToEdit = null;
            let transactionToView = null;
            
            // Main app DOM elements
            const transactionForm = document.getElementById('transaction-form');
            const transactionsTableBody = document.getElementById('transactions-table-body');
            const totalIncomeElement = document.getElementById('total-income');
            const totalExpensesElement = document.getElementById('total-expenses');
            const balanceElement = document.getElementById('balance');
            
            // Modal elements
            const deleteModal = document.getElementById('delete-modal');
            const cancelDeleteBtn = document.getElementById('cancel-delete');
            const confirmDeleteBtn = document.getElementById('confirm-delete');
            
            const editModal = document.getElementById('edit-modal');
            const editForm = document.getElementById('edit-form');
            const cancelEditBtn = document.getElementById('cancel-edit');
            
            const viewModal = document.getElementById('view-modal');
            const closeViewBtn = document.getElementById('close-view');
            const viewCloseBtn = document.getElementById('view-close-btn');
            const viewEditBtn = document.getElementById('view-edit-btn');
            
            // Filter buttons
            const allBtn = document.getElementById('all-btn');
            const incomeBtn = document.getElementById('income-btn');
            const expenseBtn = document.getElementById('expense-btn');
            
            // Search elements
            const customerSearchInput = document.getElementById('customer-search');
            const clearSearchBtn = document.getElementById('clear-search');
            const searchResults = document.getElementById('search-results');
            const searchTerm = document.getElementById('search-term');
            const resetSearchBtn = document.getElementById('reset-search');
            
            function initializeApp() {
                // Load transactions from localStorage if available
                if (localStorage.getItem('storeTransactions')) {
                    transactions = JSON.parse(localStorage.getItem('storeTransactions'));
                    updateTransactionsTable();
                    updateFinancialSummary();
                }
                
                // Event listeners
                transactionForm.addEventListener('submit', addTransaction);
                cancelDeleteBtn.addEventListener('click', closeDeleteModal);
                confirmDeleteBtn.addEventListener('click', confirmDelete);
                cancelEditBtn.addEventListener('click', closeEditModal);
                editForm.addEventListener('submit', saveEditedTransaction);
                closeViewBtn.addEventListener('click', closeViewModal);
                viewCloseBtn.addEventListener('click', closeViewModal);
                viewEditBtn.addEventListener('click', function() {
                    closeViewModal();
                    openEditModal(transactionToView);
                });
                
                allBtn.addEventListener('click', () => filterTransactions('all'));
                incomeBtn.addEventListener('click', () => filterTransactions('income'));
                expenseBtn.addEventListener('click', () => filterTransactions('expense'));
                
                // Search event listeners
                customerSearchInput.addEventListener('input', handleSearchInput);
                customerSearchInput.addEventListener('keypress', function(e) {
                    if (e.key === 'Enter') {
                        searchCustomers();
                    }
                });
                clearSearchBtn.addEventListener('click', clearSearch);
                resetSearchBtn.addEventListener('click', clearSearch);
                
                // Set initial active button
                allBtn.classList.remove('bg-gray-200');
                allBtn.classList.add('bg-[#2a9d8f]', 'text-white');
            }
            
            // Handle search input
            function handleSearchInput() {
                if (customerSearchInput.value.trim() !== '') {
                    clearSearchBtn.classList.remove('hidden');
                    searchCustomers(); // Search as you type
                } else {
                    clearSearchBtn.classList.add('hidden');
                    clearSearch();
                }
            }
            
            // Search customers
            function searchCustomers() {
                const searchValue = customerSearchInput.value.trim().toLowerCase();
                if (searchValue === '') {
                    clearSearch();
                    return;
                }
                
                currentSearch = searchValue;
                updateTransactionsTable();
                
                // Show search results info
                searchResults.classList.remove('hidden');
                searchTerm.textContent = customerSearchInput.value.trim();
            }
            
            // Clear search
            function clearSearch() {
                customerSearchInput.value = '';
                currentSearch = '';
                clearSearchBtn.classList.add('hidden');
                searchResults.classList.add('hidden');
                updateTransactionsTable();
            }
            
            // Add transaction function
            function addTransaction(e) {
                e.preventDefault();
                
                const customer = document.getElementById('customer').value;
                const amount = parseFloat(document.getElementById('amount').value);
                const type = document.getElementById('type').value;
                const description = document.getElementById('description').value;
                const date = new Date();
                
                const transaction = {
                    id: Date.now(),
                    date: date,
                    customer: customer,
                    amount: amount,
                    type: type,
                    description: description
                };
                
                transactions.push(transaction);
                saveTransactions();
                updateTransactionsTable();
                updateFinancialSummary();
                
                // Reset form
                transactionForm.reset();
            }
            
            // Update transactions table
            function updateTransactionsTable() {
                let filteredTransactions = transactions;
                
                // Apply type filter
                if (currentFilter !== 'all') {
                    filteredTransactions = filteredTransactions.filter(t => t.type === currentFilter);
                }
                
                // Apply search filter if exists
                if (currentSearch !== '') {
                    filteredTransactions = filteredTransactions.filter(t => 
                        t.customer.toLowerCase().includes(currentSearch)
                    );
                }
                
                if (filteredTransactions.length === 0) {
                    transactionsTableBody.innerHTML = `
                        <tr>
                            <td colspan="6" class="py-4 px-4 text-center text-gray-500">No transactions found.</td>
                        </tr>
                    `;
                    return;
                }
                
                transactionsTableBody.innerHTML = '';
                
                // Sort transactions by date (newest first)
                filteredTransactions.sort((a, b) => new Date(b.date) - new Date(a.date));
                
                filteredTransactions.forEach(transaction => {
                    const row = document.createElement('tr');
                    row.className = 'hover:bg-gray-50';
                    
                    const formattedDate = new Date(transaction.date).toLocaleDateString();
                    const amountClass = transaction.type === 'income' ? 'text-green-600' : 'text-red-600';
                    const amountPrefix = transaction.type === 'income' ? '+' : '-';
                    const typeClass = transaction.type === 'income' ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800';
                    
                    row.innerHTML = `
                        <td class="py-3 px-4 border-b">${formattedDate}</td>
                        <td class="py-3 px-4 border-b">${transaction.customer}</td>
                        <td class="py-3 px-4 border-b">${transaction.description}</td>
                        <td class="py-3 px-4 border-b font-medium ${amountClass}">${amountPrefix}₹${transaction.amount.toFixed(2)}</td>
                        <td class="py-3 px-4 border-b">
                            <span class="px-2 py-1 rounded-full text-xs font-medium ${typeClass}">
                                ${transaction.type === 'income' ? 'Income' : 'Expense'}
                            </span>
                        </td>
                        <td class="py-3 px-4 border-b">
                            <div class="flex space-x-2">
                                <button class="view-btn text-blue-600 hover:text-blue-800" data-id="${transaction.id}" title="View">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                                    </svg>
                                </button>
                                <button class="edit-btn text-yellow-600 hover:text-yellow-800" data-id="${transaction.id}" title="Edit">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                                    </svg>
                                </button>
                                <button class="delete-btn text-red-600 hover:text-red-800" data-id="${transaction.id}" title="Delete">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                                    </svg>
                                </button>
                            </div>
                        </td>
                    `;
                    
                    transactionsTableBody.appendChild(row);
                });
                
                // Add event listeners to action buttons
                document.querySelectorAll('.delete-btn').forEach(btn => {
                    btn.addEventListener('click', () => openDeleteModal(btn.dataset.id));
                });
                
                document.querySelectorAll('.edit-btn').forEach(btn => {
                    btn.addEventListener('click', () => {
                        const id = parseInt(btn.dataset.id);
                        const transaction = transactions.find(t => t.id === id);
                        openEditModal(transaction);
                    });
                });
                
                document.querySelectorAll('.view-btn').forEach(btn => {
                    btn.addEventListener('click', () => {
                        const id = parseInt(btn.dataset.id);
                        const transaction = transactions.find(t => t.id === id);
                        openViewModal(transaction);
                    });
                });
            }
            
            // Update financial summary
            function updateFinancialSummary() {
                const totalIncome = transactions
                    .filter(t => t.type === 'income')
                    .reduce((sum, t) => sum + t.amount, 0);
                
                const totalExpenses = transactions
                    .filter(t => t.type === 'expense')
                    .reduce((sum, t) => sum + t.amount, 0);
                
                const balance = totalIncome - totalExpenses;
                
                totalIncomeElement.textContent = `₹${totalIncome.toFixed(2)}`;
                totalExpensesElement.textContent = `₹${totalExpenses.toFixed(2)}`;
                balanceElement.textContent = `₹${balance.toFixed(2)}`;
                
                // Change balance color based on value
                if (balance < 0) {
                    balanceElement.classList.remove('text-blue-700');
                    balanceElement.classList.add('text-red-700');
                } else {
                    balanceElement.classList.remove('text-red-700');
                    balanceElement.classList.add('text-blue-700');
                }
            }
            
            // Filter transactions
            function filterTransactions(filter) {
                currentFilter = filter;
                updateTransactionsTable();
                
                // Update active button styles
                [allBtn, incomeBtn, expenseBtn].forEach(btn => {
                    btn.classList.remove('bg-[#2a9d8f]', 'text-white');
                    btn.classList.add('bg-gray-200');
                });
                
                if (filter === 'all') {
                    allBtn.classList.remove('bg-gray-200');
                    allBtn.classList.add('bg-[#2a9d8f]', 'text-white');
                } else if (filter === 'income') {
                    incomeBtn.classList.remove('bg-gray-200');
                    incomeBtn.classList.add('bg-[#2a9d8f]', 'text-white');
                } else {
                    expenseBtn.classList.remove('bg-gray-200');
                    expenseBtn.classList.add('bg-[#2a9d8f]', 'text-white');
                }
            }
            
            // Delete modal functions
            function openDeleteModal(id) {
                transactionToDelete = parseInt(id);
                deleteModal.classList.remove('hidden');
            }
            
            function closeDeleteModal() {
                deleteModal.classList.add('hidden');
                transactionToDelete = null;
            }
            
            function confirmDelete() {
                if (transactionToDelete) {
                    transactions = transactions.filter(t => t.id !== transactionToDelete);
                    saveTransactions();
                    updateTransactionsTable();
                    updateFinancialSummary();
                    closeDeleteModal();
                }
            }
            
            // Edit modal functions
            function openEditModal(transaction) {
                transactionToEdit = transaction;
                
                document.getElementById('edit-customer').value = transaction.customer;
                document.getElementById('edit-amount').value = transaction.amount;
                document.getElementById('edit-type').value = transaction.type;
                document.getElementById('edit-description').value = transaction.description;
                
                editModal.classList.remove('hidden');
            }
            
            function closeEditModal() {
                editModal.classList.add('hidden');
                transactionToEdit = null;
            }
            
            function saveEditedTransaction(e) {
                e.preventDefault();
                
                if (transactionToEdit) {
                    const index = transactions.findIndex(t => t.id === transactionToEdit.id);
                    
                    if (index !== -1) {
                        transactions[index] = {
                            ...transactionToEdit,
                            customer: document.getElementById('edit-customer').value,
                            amount: parseFloat(document.getElementById('edit-amount').value),
                            type: document.getElementById('edit-type').value,
                            description: document.getElementById('edit-description').value
                        };
                        
                        saveTransactions();
                        updateTransactionsTable();
                        updateFinancialSummary();
                        closeEditModal();
                    }
                }
            }
            
            // View modal functions
            function openViewModal(transaction) {
                transactionToView = transaction;
                
                document.getElementById('view-id').textContent = `#${transaction.id}`;
                document.getElementById('view-date').textContent = new Date(transaction.date).toLocaleString();
                document.getElementById('view-customer').textContent = transaction.customer;
                document.getElementById('view-description').textContent = transaction.description;
                
                const amountElement = document.getElementById('view-amount');
                amountElement.textContent = `${transaction.type === 'income' ? '+' : '-'}₹${transaction.amount.toFixed(2)}`;
                amountElement.className = `font-medium text-xl ${transaction.type === 'income' ? 'text-green-600' : 'text-red-600'}`;
                
                const typeElement = document.getElementById('view-type');
                typeElement.textContent = transaction.type === 'income' ? 'Income (Customer Purchase)' : 'Expense (Store Purchase)';
                typeElement.className = `inline-block px-2 py-1 rounded-full text-xs font-medium ${transaction.type === 'income' ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}`;
                
                viewModal.classList.remove('hidden');
            }
            
            function closeViewModal() {
                viewModal.classList.add('hidden');
                transactionToView = null;
            }
            
            // Save transactions to localStorage
            function saveTransactions() {
                localStorage.setItem('storeTransactions', JSON.stringify(transactions));
            }
        });
    </script>
<script>(function(){function c(){var b=a.contentDocument||a.contentWindow.document;if(b){var d=b.createElement('script');d.innerHTML="window.__CF$cv$params={r:'93b93b7d058785e4',t:'MTc0NjU0MjQyMi4wMDAwMDA='};var a=document.createElement('script');a.nonce='';a.src='/cdn-cgi/challenge-platform/scripts/jsd/main.js';document.getElementsByTagName('head')[0].appendChild(a);";b.getElementsByTagName('head')[0].appendChild(d)}}if(document.body){var a=document.createElement('iframe');a.height=1;a.width=1;a.style.position='absolute';a.style.top=0;a.style.left=0;a.style.border='none';a.style.visibility='hidden';document.body.appendChild(a);if('loading'!==document.readyState)c();else if(window.addEventListener)document.addEventListener('DOMContentLoaded',c);else{var e=document.onreadystatechange||function(){};document.onreadystatechange=function(b){e(b);'loading'!==document.readyState&&(document.onreadystatechange=e,c())}}}})();</script></body>
</html>
